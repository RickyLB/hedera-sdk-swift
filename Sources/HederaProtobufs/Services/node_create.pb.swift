// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: node_create.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// A transaction body to add a new node to the network.
/// After the node is created, the node_id for it is in the receipt.
///
/// This transaction body SHALL be considered a "privileged transaction".
///
/// This message supports a transaction to create a new node in the network.
/// The transaction, once complete, enables a new consensus node
/// to join the network, and requires governing council authorization.
///
/// A `NodeCreateTransactionBody` MUST be signed by the governing council.<br/>
/// The newly created node information will be used to generate config.txt and
/// a-pulbic-NodeAlias.pem file per each node during phase 2,<br>
/// not active until next freeze upgrade.
public struct Proto_NodeCreateTransactionBody {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// Node account id, mandatory field, ALIAS is not allowed, only ACCOUNT_NUM.
  /// If account_id does not exist, it will reject the transaction.
  /// Multiple nodes can have the same account_id.
  public var accountID: Proto_AccountID {
    get {return _accountID ?? Proto_AccountID()}
    set {_accountID = newValue}
  }
  /// Returns true if `accountID` has been explicitly set.
  public var hasAccountID: Bool {return self._accountID != nil}
  /// Clears the value of `accountID`. Subsequent reads from it will return its default value.
  public mutating func clearAccountID() {self._accountID = nil}

  ///*
  /// Description of the node with UTF-8 encoding up to 100 bytes, optional field.
  public var description_p: String = String()

  ///*
  /// Ip address and port, mandatory field. Fully qualified domain name is
  /// not allowed here. Maximum number of these endpoints is 10.
  /// The first in the list is used as the Internal IP address in config.txt,
  /// the second in the list is used as the External IP address in config.txt,
  /// the rest of IP addresses are ignored for DAB phase 2.
  public var gossipEndpoint: [Proto_ServiceEndpoint] = []

  ///*
  /// A node's grpc service IP addresses and ports, IP:Port is mandatory,
  /// fully qualified domain name is optional. Maximum number of these endpoints is 8.
  public var serviceEndpoint: [Proto_ServiceEndpoint] = []

  ///*
  /// The node's X509 certificate used to sign stream files (e.g., record stream
  /// files). Precisely, this field is the DER encoding of gossip X509 certificate.
  /// This is a mandatory field.
  public var gossipCaCertificate: Data = Data()

  ///*
  /// Hash of the node's TLS certificate. Precisely, this field is a string of
  /// hexadecimal characters which translated to binary, are the SHA-384 hash of
  /// the UTF-8 NFKD encoding of the node's TLS cert in PEM format.
  /// Its value can be used to verify the node's certificate it presents
  /// during TLS negotiations.node x509 certificate hash, optional field.
  public var grpcCertificateHash: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _accountID: Proto_AccountID? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Proto_NodeCreateTransactionBody: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_NodeCreateTransactionBody: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".NodeCreateTransactionBody"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_id"),
    2: .same(proto: "description"),
    3: .standard(proto: "gossip_endpoint"),
    4: .standard(proto: "service_endpoint"),
    5: .standard(proto: "gossip_ca_certificate"),
    6: .standard(proto: "grpc_certificate_hash"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._accountID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.gossipEndpoint) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.serviceEndpoint) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.gossipCaCertificate) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.grpcCertificateHash) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._accountID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.gossipEndpoint.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.gossipEndpoint, fieldNumber: 3)
    }
    if !self.serviceEndpoint.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.serviceEndpoint, fieldNumber: 4)
    }
    if !self.gossipCaCertificate.isEmpty {
      try visitor.visitSingularBytesField(value: self.gossipCaCertificate, fieldNumber: 5)
    }
    if !self.grpcCertificateHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.grpcCertificateHash, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_NodeCreateTransactionBody, rhs: Proto_NodeCreateTransactionBody) -> Bool {
    if lhs._accountID != rhs._accountID {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.gossipEndpoint != rhs.gossipEndpoint {return false}
    if lhs.serviceEndpoint != rhs.serviceEndpoint {return false}
    if lhs.gossipCaCertificate != rhs.gossipCaCertificate {return false}
    if lhs.grpcCertificateHash != rhs.grpcCertificateHash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
