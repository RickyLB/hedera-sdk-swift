// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: node_update.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// Modify the attribute of a node. If a field is not set in the transaction body, the
/// corresponding node attribute will be unchanged.
/// For phase 2, this marks node to be updated in the merkle tree and will be used to write config.txt and
/// a-pulbic-NodeAlias.pem file per each node during prepare freeze.
/// The node will not be updated until the network is upgraded.
/// Original node account ID has to sign the transaction.
public struct Proto_NodeUpdateTransactionBody {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// The unique id of the Node to be updated. This must refer to an existing, non-deleted node.
  public var nodeID: UInt64 = 0

  ///*
  /// If set, the new node account_id.
  public var accountID: Proto_AccountID {
    get {return _accountID ?? Proto_AccountID()}
    set {_accountID = newValue}
  }
  /// Returns true if `accountID` has been explicitly set.
  public var hasAccountID: Bool {return self._accountID != nil}
  /// Clears the value of `accountID`. Subsequent reads from it will return its default value.
  public mutating func clearAccountID() {self._accountID = nil}

  ///*
  /// If set, the new description to be associated with the node.
  public var description_p: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _description_p ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  public var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  public mutating func clearDescription_p() {self._description_p = nil}

  ///*
  /// If set, the new ip address and port.
  public var gossipEndpoint: [Proto_ServiceEndpoint] = []

  ///*
  /// If set, replace the current list of service_endpoints.
  public var serviceEndpoint: [Proto_ServiceEndpoint] = []

  ///*
  /// If set, the new X509 certificate of the gossip node.
  public var gossipCaCertificate: SwiftProtobuf.Google_Protobuf_BytesValue {
    get {return _gossipCaCertificate ?? SwiftProtobuf.Google_Protobuf_BytesValue()}
    set {_gossipCaCertificate = newValue}
  }
  /// Returns true if `gossipCaCertificate` has been explicitly set.
  public var hasGossipCaCertificate: Bool {return self._gossipCaCertificate != nil}
  /// Clears the value of `gossipCaCertificate`. Subsequent reads from it will return its default value.
  public mutating func clearGossipCaCertificate() {self._gossipCaCertificate = nil}

  ///*
  /// If set, the new grpc x509 certificate hash.
  public var grpcCertificateHash: SwiftProtobuf.Google_Protobuf_BytesValue {
    get {return _grpcCertificateHash ?? SwiftProtobuf.Google_Protobuf_BytesValue()}
    set {_grpcCertificateHash = newValue}
  }
  /// Returns true if `grpcCertificateHash` has been explicitly set.
  public var hasGrpcCertificateHash: Bool {return self._grpcCertificateHash != nil}
  /// Clears the value of `grpcCertificateHash`. Subsequent reads from it will return its default value.
  public mutating func clearGrpcCertificateHash() {self._grpcCertificateHash = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _accountID: Proto_AccountID? = nil
  fileprivate var _description_p: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _gossipCaCertificate: SwiftProtobuf.Google_Protobuf_BytesValue? = nil
  fileprivate var _grpcCertificateHash: SwiftProtobuf.Google_Protobuf_BytesValue? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Proto_NodeUpdateTransactionBody: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_NodeUpdateTransactionBody: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".NodeUpdateTransactionBody"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "node_id"),
    2: .standard(proto: "account_id"),
    3: .same(proto: "description"),
    4: .standard(proto: "gossip_endpoint"),
    5: .standard(proto: "service_endpoint"),
    6: .standard(proto: "gossip_ca_certificate"),
    7: .standard(proto: "grpc_certificate_hash"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.nodeID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._accountID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._description_p) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.gossipEndpoint) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.serviceEndpoint) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._gossipCaCertificate) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._grpcCertificateHash) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.nodeID != 0 {
      try visitor.visitSingularUInt64Field(value: self.nodeID, fieldNumber: 1)
    }
    try { if let v = self._accountID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._description_p {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.gossipEndpoint.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.gossipEndpoint, fieldNumber: 4)
    }
    if !self.serviceEndpoint.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.serviceEndpoint, fieldNumber: 5)
    }
    try { if let v = self._gossipCaCertificate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._grpcCertificateHash {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_NodeUpdateTransactionBody, rhs: Proto_NodeUpdateTransactionBody) -> Bool {
    if lhs.nodeID != rhs.nodeID {return false}
    if lhs._accountID != rhs._accountID {return false}
    if lhs._description_p != rhs._description_p {return false}
    if lhs.gossipEndpoint != rhs.gossipEndpoint {return false}
    if lhs.serviceEndpoint != rhs.serviceEndpoint {return false}
    if lhs._gossipCaCertificate != rhs._gossipCaCertificate {return false}
    if lhs._grpcCertificateHash != rhs._grpcCertificateHash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
